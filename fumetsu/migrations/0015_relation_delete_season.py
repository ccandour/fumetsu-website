# Generated by Django 5.0.6 on 2024-07-10 20:13
import time
import uuid

from django.db import migrations, models

from fumetsu.models import AnimeSeries, Relation
from utils import anilist


from django.db import transaction

relations_to_create = []
def fill_out_the_relations_from_anilist(apps, schema_editor):
    db_series = AnimeSeries.objects.all()
    db_anilist_ids = [series.anilist_id for series in db_series if series.anilist_id]

    for series in db_series:
        time.sleep(2)  # Be mindful of rate limiting
        if series.anilist_id:
            try:
                anilist_series = anilist.get_series_by_id(series.anilist_id)
                if anilist_series.relations:
                    for relation in anilist_series.relations:
                        if relation.id in db_anilist_ids:
                            relation_instance = Relation(
                                child_series_id=relation.id,
                                parent_series_id=anilist_series.id,
                                type=relation.type
                            )
                            relations_to_create.append(relation_instance)
            except Exception as e:
                print(f"Anilist API error: {e}")
                continue


class Migration(migrations.Migration):

    dependencies = [
        ('fumetsu', '0014_anime_list_cover_image'),
    ]

    operations = [
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),
                ('child_series_id', models.CharField(blank=True, max_length=100, null=True)),
                ('parent_series_id', models.CharField(blank=True, max_length=100, null=True)),
                ('type', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.DeleteModel(
            name='Season',
        ),
        migrations.RunPython(fill_out_the_relations_from_anilist),
        migrations.RunPython(
            lambda apps, schema_editor: Relation.objects.bulk_create(relations_to_create)
        )

    ]
